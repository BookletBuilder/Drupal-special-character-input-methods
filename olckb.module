<?php

/**
 * HOOK_theme
 * Themeing for JS-based toolbar
 */
function olckb_theme ($existing, $type, $theme, $path) {
 
  $path = drupal_get_path('module', 'olckb');

  $module_theme_base = array(
    'path' => $path . '/theme',
  );
 
  return array(

    'olckb_js_template' => $module_theme_base + array(
      'variables' => array('olckb_chars' => NULL),
      'template' => 'olckb-js-template',
    ),

  );
  
}


/**
 * HOOK_block_info
 * (Not used, but developing in case it will be at some point.)
 */
function olckb_block_info() {

  // Default block settings
  $defaults = array(
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'weight' => 0,
    'region' => BLOCK_REGION_NONE,
  );
  
  // Defining blocks
  $blocks['olckb_toolbar'] = $defaults + array(
    'info' => t('OLC Keyboard Toolbar')
  );
  
  return $blocks;
  
}
function olckb_block_configure($block_name = '') {

  return array();

}
function olctkb_block_save($block_name = '', $values = array()) {
}
function olckb_block_view($block_name = '') {
  switch ($block_name) {
    case 'olckb_toolbar':
      return _olckb_block_toolbar_view();
      break;
    default:
      // Block name unknown
      return NULL;
      break;
  }
}




function _olckb_block_toolbar_view() {
  return array(
    'subject' => 'Textbook options',
    'content' => array(
      '#markup' => theme(
        'olckb_js_template', array('olckb_chars' => _olckb_chars())
      )
    ),
  );
}



function _olckb_build_module_path($file) {

  $path = drupal_get_path('module', 'olckb');

  return "$path/$file";

}
function _olckb_build_settings_path($file) {

  $path = conf_path() . '/settings/olckb';

  return "$path/$file";

}
function _olckb_get_settings_file($file) {

  // TODO: Cache candidate values AND result

  $result = NULL;

  $candidates = array(
    _olckb_build_settings_path($file),
    _olckb_build_module_path($file)
  );

  foreach ($candidates as $candidate) {

    if (file_exists($candidate)) {

      $result = $candidate;
      break;

    }
    else {
      // pass
    }

  }

  return $result;

}

function olckb_page_build(&$page) {

  $kb_data_path = _olckb_get_settings_file('olckb_data.php');
  if (!is_null($kb_data_path)) {

    include $kb_data_path;

    $page['page_top']['olckb'] = array(
      '#markup' => theme(
        'olckb_js_template', 
        array('olckb_chars' => _olckb_chars())
      ),
    );

  }
  else {

    drupal_set_message('Missing "olckb_data.php"', 'warning');

  }

}

function _olckb_chars() {

  $kb_data_path = _olckb_get_settings_file('olckb_data.php');
  include $kb_data_path;

  // Provision "type" key
  foreach ($olckb_characters as $kb_index => $kb_item) {

    $default_type = 'CharacterGroup';
    if (empty($kb_item['type'])) {
      $kb_item['type'] = $default_type;
    }
    else {
      // pass; already defined
    }

  }

  // Normalize characters
  foreach ($olckb_characters as $kb_index => $kb_item) {

    if ($kb_item['type'] == 'CharacterGroup') {

      foreach ($kb_item['characters'] as $char_index => $char) {

        $char_normalized = null;
        switch (gettype($char)) {
          case 'array':
            
            $olckb_characters[$kb_index]['characters'][$char_index]['show'] = _olckb_normalize($char['show']);
            $olckb_characters[$kb_index]['characters'][$char_index]['insert'] = _olckb_normalize($char['insert']);

            break;
          case 'string':

            $olckb_characters[$kb_index]['characters'][$char_index] = _olckb_normalize($char);

            break;
          default:

            // pass

            break;
        }
        

      }

    }
    else {
      // pass
    }

  }

  return $olckb_characters;

}

function _olckb_normalize($value) {

  return ! Normalizer::isNormalized($value)
         ? Normalizer::normalize($value, Normalizer::FORM_C)
         : $value
         ;

}

